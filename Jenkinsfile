// Jenkinsfile ‚Äî INFRA (single env). –í–µ—Ç–∫–∏:
//   draft-infra => —Ç–æ–ª—å–∫–æ plan
//   main        => plan -> manual approve -> apply -> ansible

pipeline {
  agent any

  environment {
    AWS_DEFAULT_REGION = 'eu-central-1'
    TF_IN_AUTOMATION   = 'true'

    // –≥–¥–µ –ª–µ–∂–∏—Ç Terraform –∏ Ansible:
    TF_DIR      = 'infrastructure/main_infra'
    ANSIBLE_DIR = 'infrastructure/ansible'

    // Telegram creds (Secret text)
    TELEGRAM_BOT_TOKEN = credentials('telegram-bot-token')
    TELEGRAM_CHAT_ID   = credentials('telegram-chat-id')

    // –ò–º—è AWS KeyPair (String credential) ‚Äî –Ω—É–∂–Ω–æ Terraform‚Äô—É
    SSH_KEY_NAME = credentials('ec2-ssh-key')

    // –ö—ç—à –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ ‚Äî –±—ã—Å—Ç—Ä–µ–µ init –Ω–∞ macOS
    TF_PLUGIN_CACHE_DIR = "${WORKSPACE}/.terraform.d/plugin-cache"
  }

  options { timestamps() }

  stages {
    stage('Checkout') {
      steps {
        echo "Branch: ${env.BRANCH_NAME}"
        checkout scm
      }
    }

    stage('Terraform Init') {
      steps {
        dir("${env.TF_DIR}") {
          script {
            def TF = tool name: 'terraform-1.6.6'
            withEnv(["TF_BIN=${TF}/terraform", "TF_PLUGIN_CACHE_DIR=${env.TF_PLUGIN_CACHE_DIR}"]) {
              sh '''
                mkdir -p "$TF_PLUGIN_CACHE_DIR"
                "$TF_BIN" -version
                "$TF_BIN" init -upgrade
                # macOS: –∏–Ω–æ–≥–¥–∞ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã –≤ quarantine ‚Äî —Å–Ω–∏–º–µ–º –Ω–∞ –≤—Å—è–∫–∏–π
                if command -v xattr >/dev/null 2>&1; then
                  xattr -dr com.apple.quarantine .terraform || true
                fi
                chmod -R +x .terraform || true
              '''
            }
          }
        }
      }
    }

    stage('Validate & Plan (all branches)') {
      steps {
        dir("${env.TF_DIR}") {
          script {
            def TF = tool name: 'terraform-1.6.6'
            withEnv([
              "TF_BIN=${TF}/terraform",
              "TF_PLUGIN_CACHE_DIR=${env.TF_PLUGIN_CACHE_DIR}",
              // –±–µ–∑–æ–ø–∞—Å–Ω–æ –ø—Ä–æ–∫–∏–¥—ã–≤–∞–µ–º –∏–º—è KeyPair
              "TF_VAR_ssh_key_name=${SSH_KEY_NAME}"
            ]) {
              sh '''
                # fmt: –µ—Å–ª–∏ –µ—Å—Ç—å –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è ‚Äî –∞–≤—Ç–æ–∏—Å–ø—Ä–∞–≤–∏–º, –Ω–æ –Ω–µ –≤–∞–ª–∏–º —Å–±–æ—Ä–∫—É
                set +e
                "$TF_BIN" fmt -check -recursive
                st=$?
                if [ $st -ne 0 ]; then
                  echo "‚ö†Ô∏è terraform fmt –Ω–∞—à—ë–ª –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è. –ê–≤—Ç–æ—Ñ–æ—Ä–º–∞—Ç–∏—Ä—É—é..."
                  "$TF_BIN" fmt -recursive
                fi
                set -e

                "$TF_BIN" validate
                "$TF_BIN" plan -out=tfplan
              '''
            }
          }
        }
      }
      post {
        success { script { notifyTG("‚úÖ [${env.JOB_NAME}] plan OK on ${env.BRANCH_NAME} (#${env.BUILD_NUMBER})") } }
        failure { script { notifyTG("‚ùå [${env.JOB_NAME}] plan FAILED on ${env.BRANCH_NAME} (#${env.BUILD_NUMBER})") } }
      }
    }

    stage('Manual Approval (main only)') {
      when { branch 'main' }
      steps { input message: 'Apply infrastructure?', ok: 'Apply' }
    }

    stage('Apply (main only)') {
      when { branch 'main' }
      steps {
        dir("${env.TF_DIR}") {
          script {
            def TF = tool name: 'terraform-1.6.6'
            withEnv(["TF_BIN=${TF}/terraform", "TF_PLUGIN_CACHE_DIR=${env.TF_PLUGIN_CACHE_DIR}"]) {
              sh '"$TF_BIN" apply -auto-approve tfplan'
            }
          }
        }
      }
      post {
        success { script { notifyTG("üöÄ [${env.JOB_NAME}] apply DONE on main (#${env.BUILD_NUMBER})") } }
        failure { script { notifyTG("üî• [${env.JOB_NAME}] apply FAILED on main (#${env.BUILD_NUMBER})") } }
      }
    }

    stage('Ansible Configure (main only)') {
      when { branch 'main' }
      steps {
        // 1) –¥–æ—Å—Ç–∞—ë–º IP –∏–∑ Terraform outputs
        dir("${env.TF_DIR}") {
          script {
            def TF = tool name: 'terraform-1.6.6'
            env.APP_IP = sh(script: "\"${TF}/terraform\" output -raw public_ip", returnStdout: true).trim()
            echo "EC2 public IP: ${env.APP_IP}"
          }
        }

        // 2) —Ñ–æ—Ä–º–∏—Ä—É–µ–º inventory –¥–ª—è Ansible —Ä—è–¥–æ–º —Å playbook
        dir("${env.ANSIBLE_DIR}") {
          script {
            def inv = "[web]\n${env.APP_IP}\n"
            writeFile file: 'inventory.ini', text: inv
            echo "Inventory written to ${env.ANSIBLE_DIR}/inventory.ini"
          }
        }

        // 3) –∑–∞–ø—É—Å–∫–∞–µ–º Ansible c SSH-–∫–ª—é—á–æ–º –∏–∑ Jenkins credentials
        // –°–æ–∑–¥–∞–π credential —Ç–∏–ø–∞ "SSH Username with private key" —Å ID: ec2-ssh-private, username: ubuntu
        withCredentials([sshUserPrivateKey(credentialsId: 'ec2-ssh-private', keyFileVariable: 'SSH_KEY_FILE', usernameVariable: 'SSH_USER')]) {
          dir("${env.ANSIBLE_DIR}") {
            sh '''
              ANSIBLE_HOST_KEY_CHECKING=false ansible -i inventory.ini web -m ping -u "$SSH_USER" --private-key "$SSH_KEY_FILE" || true
              ANSIBLE_HOST_KEY_CHECKING=false ansible-playbook -i inventory.ini site.yml -u "$SSH_USER" --private-key "$SSH_KEY_FILE"
            '''
          }
        }
      }
      post {
        success { script { notifyTG("üîß [${env.JOB_NAME}] ansible DONE on main") } }
        failure { script { notifyTG("üõë [${env.JOB_NAME}] ansible FAILED on main") } }
      }
    }
  }
}

// –¢–µ–ª–µ–≥—Ä–∞–º –±–µ–∑ Groovy-–∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏–∏
def notifyTG(String message) {
  withEnv(["MSG=${message}"]) {
    sh '''#!/bin/bash
curl -s -X POST "https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage" \
  -d chat_id="${TELEGRAM_CHAT_ID}" \
  --data-urlencode "text=${MSG}"
'''
  }
}