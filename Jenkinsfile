pipeline {
  agent any
  environment {
    AWS_DEFAULT_REGION = 'eu-central-1'
    TF_IN_AUTOMATION   = 'true'

    TELEGRAM_BOT_TOKEN = credentials('telegram-bot-token')
    TELEGRAM_CHAT_ID   = credentials('telegram-chat-id')

    // –ò–º—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π AWS KeyPair (String credential –≤ Jenkins —Å ID: ec2-ssh-key)
    SSH_KEY_NAME       = credentials('ec2-ssh-key')
  }
  options { timestamps() }

  stages {
    stage('Checkout') {
      steps {
        echo "Branch: ${env.BRANCH_NAME}"
        checkout scm
      }
    }

    stage('Terraform Init') {
      steps { dir('main') { sh 'terraform init -upgrade' } }
    }

    stage('Validate & Plan (all branches)') {
      steps {
        dir('main') {
          sh 'terraform fmt -check'
          sh '''
            terraform validate
            terraform plan \
              -var="ssh_key_name=${SSH_KEY_NAME}" \
              -out=tfplan
          '''
        }
      }
      post {
        success { script { notify("‚úÖ [${env.JOB_NAME}] plan OK on ${env.BRANCH_NAME} (#${env.BUILD_NUMBER})") } }
        failure { script { notify("‚ùå [${env.JOB_NAME}] plan FAILED on ${env.BRANCH_NAME} (#${env.BUILD_NUMBER})") } }
      }
    }

    // –¢–æ–ª—å–∫–æ –≤ main –ø—Ä–æ—Å–∏–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ:
    stage('Manual Approval (main only)') {
      when { branch 'main' }
      steps { input message: 'Apply infrastructure?', ok: 'Apply' }
    }

    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –∏–∑ main:
    stage('Apply (main only)') {
      when { branch 'main' }
      steps { dir('main') { sh 'terraform apply -auto-approve tfplan' } }
      post {
        success { script { notify("üöÄ [${env.JOB_NAME}] apply DONE on main (#${env.BUILD_NUMBER})") } }
        failure { script { notify("üî• [${env.JOB_NAME}] apply FAILED on main (#${env.BUILD_NUMBER})") } }
      }
    }

    // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ö–æ—Å—Ç–∞ ‚Äî —Ç–æ–∂–µ —Ç–æ–ª—å–∫–æ –≤ main:
    stage('Ansible Configure (main only)') {
      when { branch 'main' }
      steps {
        dir('main') {
          script {
            def IP = sh(script: "terraform output -raw public_ip", returnStdout: true).trim()
            writeFile file: 'inventory', text: "${IP}\n"
          }
        }
        dir('ansible') {
          sh 'ANSIBLE_HOST_KEY_CHECKING=false ansible -i ../main/inventory all -m ping -u ubuntu || true'
          sh 'ANSIBLE_HOST_KEY_CHECKING=false ansible-playbook -i ../main/inventory site.yml -u ubuntu'
        }
      }
      post {
        success { script { notify("üîß [${env.JOB_NAME}] ansible DONE on main") } }
        failure { script { notify("üõë [${env.JOB_NAME}] ansible FAILED on main") } }
      }
    }
  }
}

def notify(String message) {
  // –ü–µ—Ä–µ–¥–∞—ë–º —Ç–µ–∫—Å—Ç –≤ —à–µ–ª–ª —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å Groovy GString
  withEnv(["MSG=${message}"]) {
    sh '''#!/bin/bash
curl -s -X POST "https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage" \
  -d chat_id="${TELEGRAM_CHAT_ID}" \
  --data-urlencode "text=${MSG}"
'''
  }
}